1. Draw a picture of an initially empty LinkedList, including the two sentinels.

2. Draw a picture of the LinkedList after the insertion of one value.

3. Based on the previous two pictures, can you describe what property characterizes an empty collection?

You can check if the list is empty by seeing if the front sentinel points to the back one. This indicates that there are no links between the sentinels. Also, check the size!



4. Draw a picture of a LinkedList with three or more values (in addition to the sentinels).

5. Draw a picture after a value has been inserted into the front of the collection. Notice that this is between the front sentinel and the following element. Draw a picture showing an insertion into the back. Notice that this is again between the last element and the ending sentinel. Abstracting from these pictures, what would the function _addLink need to do, where the argument is the link that will follow the location in which the value is inserted.

Any addition just requires a redirection in the pointers. Addition to the back would result in a link to the left of the back sentinel.

6. Draw a picture of a linkedList with three or more values, then examine what is needed to remove both the first and the last element. Can you see how both of these operations can be implemented as a call on a common operation, called _removeLink?

Pointer reassignment is needed. removeLink can be called with any link, whether in the front or back, due to the sentinels guarding the indices. 

7. What is the algorithmic complexity of each of the deque operations?

O(1), constant. 
